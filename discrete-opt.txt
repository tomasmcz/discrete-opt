-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Discrete optimization.
--   
--   Currently contains Ant Colony Optimization and Simulated Annealing.
@package discrete-opt
@version 0.1.0.0


-- | Vehicle Routing Problem.
module VRP
type Size = Int
type Vertex = Int
type Path = [Vertex]
type Distance = Double
type Coordinate = Double
type Capacity = Demand
type Demand = Int
type Solution = (Score, (State, [Path]))
type State = Map Int Vertex
type Score = Double
type DistF = (Vertex, Vertex) -> Distance
type DemF = Vertex -> Demand
type DArray = UArray Vertex Demand
readProblemF :: FilePath -> IO (Size, Size, Capacity, DistF, DemF)
readProblemM :: FilePath -> IO (Size, Size, DistArray, PenaltyF)
neighbour :: (State -> (Score, [Path])) -> (Size, Size) -> Solution -> Rand StdGen Solution
solve :: DistF -> DemF -> Capacity -> State -> (Score, [Path])
allNeigh :: (State -> (Score, [Path])) -> Solution -> [Solution]


-- | Traveling Salesman Problem.
module TSP
type Size = Int
type Vertex = Int
type Path = [Vertex]
type Distance = Double
type Coordinate = Double
type Score = Double
type CArray = UArray Vertex Coordinate
type DArray = UArray (Vertex, Vertex) Distance
type FDist = (Vertex, Vertex) -> Distance
data TSPFile
MatrixFile :: FilePath -> TSPFile
Euc2DFile :: FilePath -> TSPFile
readProblemMatrix :: TSPFile -> IO (Size, DArray)
readProblemFunction :: TSPFile -> IO (Size, FDist)
neighbours :: FDist -> Size -> (Score, Path) -> Rand StdGen (Score, Path)
score :: FDist -> Path -> Score


-- | This module implements the 2-opt heuristic for TSP.
module TSP.TwoOpt
optimize :: FDist -> Path -> Path


-- | Nearest Neighbour heuristic for TSP.
module TSP.NN
optimize :: FDist -> Int -> (Distance, Path)


-- | Ant Colony Optimization.
module ACO
type Pheromon = Double
type Coefficient = Double
data Config
Config :: Size -> Int -> Int -> Pheromon -> Coefficient -> Coefficient -> Pheromon -> Pheromon -> Bool -> (Path -> Double -> Double) -> Bool -> Int -> Config

-- | size of the graph
[paramSize] :: Config -> Size

-- | number of ants in one generation
[paramAGen] :: Config -> Int

-- | number of generations
[paramNGen] :: Config -> Int

-- | initial value of pheromones
[paramInitPh] :: Config -> Pheromon

-- | Alpha parameter
[paramAlpha] :: Config -> Coefficient

-- | Beta parameter
[paramBeta] :: Config -> Coefficient

-- | evaporation rate
[paramEvRate] :: Config -> Pheromon

-- | PBest mmas parameter
[paramPBest] :: Config -> Pheromon

-- | use 2-Opt heuristic
[paramUse2Opt] :: Config -> Bool

-- | penalty function
[penalty] :: Config -> Path -> Double -> Double

-- | randomize origin
[originRandom] :: Config -> Bool

-- | return to origin n times
[returnToOrigin] :: Config -> Int

-- | Default configuration.
defConfig :: Size -> Config
optimize :: Config -> DArray -> IO (Distance, Path)
optimizeWithInfo :: Config -> DArray -> IO ((Distance, Path), [Distance])


-- | Branch and bound solver for TSP.
module BB
data Config
Config :: Size -> Maybe Double -> Config

-- | size of the graph
[paramSize] :: Config -> Size

-- | initial estimate
[initEst] :: Config -> Maybe Double

-- | Default configuration.
defConfig :: Size -> Config
optimize :: FDist -> Config -> IO ()


-- | Simulated Annealing.
module SA
type Score = Double
type Temp = Double
data Config
Config :: Temp -> Double -> Temp -> Int -> Int -> Config
[initialTemp] :: Config -> Temp
[cooling] :: Config -> Double
[finalTemp] :: Config -> Temp
[coolingPeriod] :: Config -> Int
[info] :: Config -> Int
optimize :: Config -> ((Score, d) -> Rand StdGen (Score, d)) -> (Score, d) -> Rand StdGen ((Score, d), [String])
descent :: ((Score, d) -> [(Score, d)]) -> (Score, d) -> ((Score, d), [String])
